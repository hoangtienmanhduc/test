package vn.techres.order.online.v1.response;import com.fasterxml.jackson.annotation.JsonProperty;import lombok.Data;import lombok.Getter;import lombok.Setter;import vn.techres.microservice.grpc.java.elasticsearch.customer_order_menu.CustomerOrderMenuResponse;import java.util.ArrayList;import java.util.List;import java.util.stream.Collectors;@Data@Getter@Setterpublic class FoodResponse {    private int id;    @JsonProperty("restaurant_id")    private int restaurantId;    @JsonProperty("restaurant_brand_id")    private int restaurantBrandId;    @JsonProperty("branch_id")    private int branchId;    @JsonProperty("restaurant_kitchen_place_id")    private int restaurantKitchenPlaceId;    @JsonProperty("restaurant_vat_config_id")    private int restaurantVatConfigId;    @JsonProperty("category_id")    private int categoryId;    @JsonProperty("category_name")    private String categoryName;    @JsonProperty("category_type")    private int categoryType;    @JsonProperty("vat_percent")    private float vatPercent;    @JsonProperty("avatar")    private String avatar;    @JsonProperty("avatar_thump")    private String avatarThump;    @JsonProperty("code")    private String code;    @JsonProperty("prefix")    private String prefix;    @JsonProperty("name")    private String name;    @JsonProperty("normalize_name")    private String normalizedName;    @JsonProperty("description")    private String description;    @JsonProperty("original_price")    private double originalPrice;    @JsonProperty("price")    private double price;    @JsonProperty("point_to_purchase")    private int pointToPurchase;    @JsonProperty("unit_type")    private String unitType;    @JsonProperty("is_addition")    private int isAddition;    @JsonProperty("is_addition_like_food")    private int isAdditionLikeFood;    @JsonProperty("time_to_completed")    private int timeToCompleted;    @JsonProperty("is_special_claim_point")    private int isSpecialClaimPoint;    @JsonProperty("is_sell_by_weight")    private int isSellByWeight;    @JsonProperty("is_allow_review")    private int isAllowReview;    @JsonProperty("is_allow_print")    private int isAllowPrint;    @JsonProperty("is_allow_print_fishbowl")    private int isAllowPrintFishbowl;    @JsonProperty("is_allow_purchase_by_point")    private int isAllowPurchaseByPoint;    @JsonProperty("is_take_away")    private int isTakeAway;    @JsonProperty("is_best_seller")    private int isBestSeller;    @JsonProperty("is_combo")    private int isCombo;    @JsonProperty("is_goods")    private int isGoods;    @JsonProperty("is_allow_employee_gift")    private int isAllowEmployeeGift;    @JsonProperty("sale_online_status")    private int saleOnlineStatus;    @JsonProperty("status")    private int status;    @JsonProperty("is_deleted")    private int isDeleted;    @JsonProperty("temporary_percent")    private int temporaryPercent;    @JsonProperty("temporary_price_from_date")    private String temporaryPriceFromDate;    @JsonProperty("temporary_price_to_date")    private String temporaryPriceToDate;    @JsonProperty("temporary_price")    private double temporaryPrice;    @JsonProperty("is_allow_booking")    private int isAllowBooking;    @JsonProperty("is_allow_completed_and_approved_for_drink")    private int isAllowCompletedAndApprovedForDrink;    @JsonProperty("is_allow_print_stamp")    private int isAllowPrintStamp;    @JsonProperty("price_with_temporary")    private double priceWithTemporary;    @JsonProperty("is_out_stock")    private int isuOtStock;    @JsonProperty("food_addition_ids")    private List<Integer> foodAdditionIds = new ArrayList<>();    @JsonProperty("combo_food_ids")    private List<Integer> comboFoodIds = new ArrayList<>();    @JsonProperty("addition_foods")    private List<AdditionFoodResponse> additionFoods;    @JsonProperty("food_in_combo")    private List<FoodMenuFoodInComboResponse> foodInCombo;    @JsonProperty("food_notes")    private List<FoodNoteResponse> foodNotes;    public FoodResponse() {    }    public FoodResponse(CustomerOrderMenuResponse entity) {        this.id = entity.getId();        this.restaurantId = entity.getRestaurantId();        this.restaurantBrandId = entity.getRestaurantBrandId();        this.branchId = entity.getBranchId();        this.restaurantKitchenPlaceId = entity.getRestaurantKitchenPlaceId();        this.restaurantVatConfigId = entity.getRestaurantVatConfigId();        this.categoryId = entity.getCategoryId();        this.categoryName = entity.getCategoryName() != null ? entity.getCategoryName() : "";        this.categoryType = entity.getCategoryType();        this.vatPercent = entity.getVatPercent();        this.foodAdditionIds = entity.getComboFoodIdsList();        this.avatar = entity.getAvatar() != null ? entity.getAvatar() : "";        this.avatarThump = entity.getAvatarThump() != null ? entity.getAvatarThump() : "";        this.code = entity.getCode() != null ? entity.getCode() : "";        this.prefix = entity.getPrefix() != null ? entity.getPrefix() : "";        this.name = entity.getName() != null ? entity.getName() : "";        this.normalizedName = entity.getNormalizeName() != null ? entity.getNormalizeName() : "";        this.description = entity.getDescription() != null ? entity.getDescription() : "";        this.originalPrice = entity.getOriginalPrice();        this.price = entity.getPrice();        this.pointToPurchase = entity.getPointToPurchase();        this.unitType = entity.getUnitType() != null ? entity.getUnitType() : "";        this.isAddition = entity.getIsAddition();        this.isAdditionLikeFood = entity.getIsAdditionLikeFood();        this.timeToCompleted = entity.getTimeToCompleted();        this.isSpecialClaimPoint = entity.getIsSpecialClaimPoint();        this.isSellByWeight = entity.getIsSellByWeight();        this.isAllowReview = entity.getIsAllowReview();        this.isAllowPrint = entity.getIsAllowPrint();        this.isAllowPrintFishbowl = entity.getIsAllowPrintFishbowl();        this.isAllowPurchaseByPoint = entity.getIsAllowPurchaseByPoint();        this.isTakeAway = entity.getIsTakeAway();        this.isBestSeller = entity.getIsBestSeller();        this.isCombo = entity.getIsCombo();        this.isGoods = entity.getIsGoods();        this.isAllowEmployeeGift = entity.getIsAllowEmployeeGift();        this.saleOnlineStatus = entity.getSaleOnlineStatus();        this.status = entity.getStatus();        this.isDeleted = entity.getIsDeleted();        this.temporaryPercent = entity.getTemporaryPercent();        this.temporaryPriceFromDate = entity.getTemporaryPriceFromDate() != null ? entity.getTemporaryPriceFromDate() : "";        this.temporaryPriceToDate = entity.getTemporaryPriceToDate() != null ? entity.getTemporaryPriceToDate() : "";        this.temporaryPrice = entity.getTemporaryPrice();        this.isAllowBooking = entity.getIsAllowBooking();        this.isAllowCompletedAndApprovedForDrink = entity.getIsAllowCompletedAndApprovedForDrink();        this.isAllowPrintStamp = entity.getIsAllowPrintStamp();        this.priceWithTemporary = entity.getPriceWithTemporary();        this.isuOtStock = entity.getIsOutStock();        this.foodAdditionIds = entity.getFoodAdditionIdsList();        this.additionFoods = new AdditionFoodResponse().mapToListMenu(entity.getAdditionFoodsList());        this.comboFoodIds = entity.getComboFoodIdsList();        this.foodInCombo = new FoodMenuFoodInComboResponse().mapToList(entity.getFoodInComboList());        this.foodNotes = new FoodNoteResponse().mapToList(entity.getFoodNotesList());    }    public List<FoodResponse> mapToList(List<CustomerOrderMenuResponse> baseEntities) {        return baseEntities.stream().map(FoodResponse::new).collect(Collectors.toList());    }}