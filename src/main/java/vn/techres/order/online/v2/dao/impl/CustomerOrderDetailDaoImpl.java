package vn.techres.order.online.v1.dao.impl;import jakarta.persistence.ParameterMode;import jakarta.persistence.StoredProcedureQuery;import jakarta.persistence.criteria.CriteriaQuery;import jakarta.persistence.criteria.Predicate;import jakarta.persistence.criteria.Root;import org.springframework.stereotype.Repository;import vn.techres.order.online.common.enums.StoreProcedureStatusCodeEnum;import vn.techres.order.online.v1.dao.AbstractDao;import vn.techres.order.online.v1.dao.CustomerOrderDetailDao;import vn.techres.order.online.v1.entity.CustomerOrderDetail;import vn.techres.order.online.v1.version.VersionService;import vn.techres.order.online.common.exception.TechResHttpException;import org.springframework.http.HttpStatus;import java.util.ArrayList;import java.util.List;@Repository("CustomerOrderDetailDaoImpl" + VersionService.VERSION)public class CustomerOrderDetailDaoImpl extends AbstractDao<CustomerOrderDetail, Long> implements CustomerOrderDetailDao {    @Override    public List<CustomerOrderDetail> findOnlineOrderDetailByOnlineOrderId(int onlineOrderId) {        CriteriaQuery<CustomerOrderDetail> criteriaQuery = this.getBuilder().createQuery(CustomerOrderDetail.class);        Root<CustomerOrderDetail> root = criteriaQuery.from(CustomerOrderDetail.class);        List<Predicate> predicates = new ArrayList<>();        predicates.add(this.getBuilder().equal(root.get("customerOrderId"), onlineOrderId));        criteriaQuery.select(root).where(predicates.toArray(new Predicate[0]));        return this.getSession().createQuery(criteriaQuery).getResultList();    }    @Override    public CustomerOrderDetail findOne(long id) {        return this.getSession().find(CustomerOrderDetail.class, id);    }    @Override    public void delete(CustomerOrderDetail customerOrderDetail) {        this.getSession().delete(customerOrderDetail);    }    @Override    public void deleteCustomerOrderDetail(String customerOrderIds) throws Exception {        StoredProcedureQuery query = this.getSession()                .createStoredProcedureQuery("sp_delete_all_customer_order_detail_by_customer_order_ids")                .registerStoredProcedureParameter("customerOrderIds", String.class, ParameterMode.IN)                .registerStoredProcedureParameter("status_code", Integer.class, ParameterMode.OUT)                .registerStoredProcedureParameter("message_error", String.class, ParameterMode.OUT);        query.setParameter("customerOrderIds", customerOrderIds);        query.execute();        int statusCode = (int) query.getOutputParameterValue("status_code");        String messageError = query.getOutputParameterValue("message_error").toString();        switch (StoreProcedureStatusCodeEnum.valueOf(statusCode)) {            case SUCCESS:                break;            case INPUT_INVALID:                throw new TechResHttpException(HttpStatus.BAD_REQUEST, messageError);            default:                throw new Exception(messageError);        }    }    @Override    public List<CustomerOrderDetail> findByCustomerOrderOnlineId(int customerOrderId) {        CriteriaQuery<CustomerOrderDetail> criteriaQuery = this.getBuilder().createQuery(CustomerOrderDetail.class);        Root<CustomerOrderDetail> root = criteriaQuery.from(CustomerOrderDetail.class);        List<Predicate> predicates = new ArrayList<>();        predicates.add(this.getBuilder().equal(root.get("customerOrderId"),                customerOrderId));        predicates.add(this.getBuilder().equal(root.get("orderDetailComboParentId"),                0));        criteriaQuery.select(root).where(predicates.toArray(new Predicate[] {}));        return this.getSession().createQuery(criteriaQuery).getResultList();    }}