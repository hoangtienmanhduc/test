package vn.techres.order.online.v1.controller;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.bind.annotation.RestController;import io.swagger.v3.oas.annotations.Operation;import io.swagger.v3.oas.annotations.Parameter;import io.swagger.v3.oas.annotations.enums.ParameterIn;import jakarta.validation.Valid;import jakarta.validation.constraints.Min;import net.devh.boot.grpc.client.inject.GrpcClient;import vn.techres.microservice.grpc.java.elasticsearch.customer_order_menu.CustomerOrderMenuByFoodIdRequest;import vn.techres.microservice.grpc.java.elasticsearch.customer_order_menu.CustomerOrderMenuListResponses;import vn.techres.microservice.grpc.java.elasticsearch.customer_order_menu.CustomerOrderMenuRequest;import vn.techres.microservice.grpc.java.elasticsearch.customer_order_menu.CustomerOrderMenuResponse;import vn.techres.microservice.grpc.java.elasticsearch.customer_order_menu.CustomerOrderMenuServiceGrpc;import vn.techres.order.online.common.pagination.Pagination;import vn.techres.order.online.common.utils.GrpcRetry;import vn.techres.order.online.v1.response.BaseListDataResponse;import vn.techres.order.online.v1.response.BaseResponse;import vn.techres.order.online.v1.response.FoodResponse;import vn.techres.order.online.v1.version.VersionService;@RestController("FoodController" + VersionService.VERSION)@RequestMapping(value = VersionService.VERSION_PATH + "foods")public class FoodController extends BaseController {	@GrpcClient("java_elasticsearch")	private CustomerOrderMenuServiceGrpc.CustomerOrderMenuServiceBlockingStub customerOrderMenuServiceBlockingStub;	@Operation(summary = "API Lấy danh sách menu order online", description = "API Lấy danh sách menu order online")	@Parameter(in = ParameterIn.QUERY, name = "restaurant_id", description = "Id nhà hàng, truyền phải lớn hơn 0")	@Parameter(in = ParameterIn.QUERY, name = "restaurant_brand_id", description = "Id thương hiệu, truyền phải lớn hơn 0")	@Parameter(in = ParameterIn.QUERY, name = "branch_id", description = "Id chi nhánh, truyền phải lớn hơn 0")	@Parameter(in = ParameterIn.QUERY, name = "category_type", description = "category_type, không truyền lấy tất cả")	@Parameter(in = ParameterIn.QUERY, name = "key_search", description = "key_search, không truyền lấy tất cả")	@Parameter(in = ParameterIn.QUERY, name = "page", description = "Phân trang, Mặc định sẽ lấy trang dầu tiên")	@Parameter(in = ParameterIn.QUERY, name = "limit", description = "Giới hạn lấy bao nhiêu phần tử, Mặc định là 20")	@GetMapping(value = "/customer-order-online/menu", consumes = { MediaType.ALL_VALUE }, produces =			{ MediaType.APPLICATION_JSON_VALUE })	@ResponseBody	public ResponseEntity<BaseResponse<BaseListDataResponse<FoodResponse>>> getMenu(			@Valid @Min(value = 1, message = "Nhà hàng phải lớn hơn 0") @RequestParam(name = "restaurant_id", required = true) int restaurantId,			@Valid @Min(value = 1, message = "Thương hiệu phải lớn hơn 0") @RequestParam(name = "restaurant_brand_id", required = true) int restaurantBrandId,			@Valid @Min(value = 1, message = "Chi nhánh phải lớn hơn 0") @RequestParam(name = "branch_id", required = true) int branchId,			@RequestParam(name = "category_type", required = false, defaultValue = "-1") int categoryType,			@RequestParam(name = "key_search", required = false, defaultValue = "") String keySearch,			@Valid @Min(value = 20, message = "Mặc định là 20") @RequestParam(name = "limit", required = false, defaultValue = "20") int limit,			@Valid @Min(value = 1, message = "Mặc định là 1") @RequestParam(name = "page", required = false, defaultValue = "1") int page)			throws Exception {		BaseResponse<BaseListDataResponse<FoodResponse>> response = new BaseResponse<>();		Pagination pagination = new Pagination(page, limit);		CustomerOrderMenuListResponses customerOrderMenuListResponses = new GrpcRetry().getMenu(				customerOrderMenuServiceBlockingStub,				CustomerOrderMenuRequest.newBuilder()						.setRestaurantId(restaurantId)						.setRestaurantBrandId(restaurantBrandId)						.setBranchId(branchId).setAreaId(-1)						.setCategoryType(categoryType)						.setKeySearch(keySearch)						.setPage(pagination.getOffset())						.setLimit(pagination.getLimit())						.build()		);		BaseListDataResponse<FoodResponse> baseListDataResponse = new BaseListDataResponse<>();		baseListDataResponse.setLimit(customerOrderMenuListResponses.getLimit());		baseListDataResponse.setTotalRecord(customerOrderMenuListResponses.getTotalRecord());		baseListDataResponse.setList(new FoodResponse().mapToList(customerOrderMenuListResponses.getListList()));		response.setData(baseListDataResponse);		return new ResponseEntity<>(response, HttpStatus.OK);	}	@Operation(summary = "API Lấy chi tiết món order online", description = "API Lấy chi tiết món order online")	@Parameter(in = ParameterIn.QUERY, name = "restaurant_id", description = "Id nhà hàng, truyền phải lớn hơn 0")	@Parameter(in = ParameterIn.QUERY, name = "restaurant_brand_id", description = "Id thương hiệu, truyền phải lớn hơn 0")	@Parameter(in = ParameterIn.QUERY, name = "branch_id", description = "Id chi nhánh, truyền phải lớn hơn 0")	@Parameter(in = ParameterIn.PATH, name = "id", description = "Id món ăn, truyền phải lớn hơn 0")	@GetMapping(value = "/customer-order-online/{id}", consumes = { MediaType.ALL_VALUE }, produces = { MediaType.APPLICATION_JSON_VALUE })	@ResponseBody	public ResponseEntity<BaseResponse<FoodResponse>> getDetail(			@Valid @Min(value = 1, message = "Nhà hàng phải lớn hơn 0") @RequestParam(name = "restaurant_id", required = true) int restaurantId,			@Valid @Min(value = 1, message = "Thương hiệu phải lớn hơn 0") @RequestParam(name = "restaurant_brand_id", required = true) int restaurantBrandId,			@Valid @Min(value = 1, message = "Chi nhánh phải lớn hơn 0") @RequestParam(name = "branch_id", required = true) int branchId,			@Valid @Min(value = 1, message = "Mặc định là 1") @PathVariable("id") int foodId) throws Exception {		BaseResponse<FoodResponse> response = new BaseResponse<>();		CustomerOrderMenuResponse customerOrderMenuResponse = new GrpcRetry().getCustomerOrderMenuByFoodId(				customerOrderMenuServiceBlockingStub,				CustomerOrderMenuByFoodIdRequest.newBuilder()						.setRestaurantId(restaurantId)						.setRestaurantBrandId(restaurantBrandId)						.setBranchId(branchId)						.setAreaId(-1)						.setFoodId(foodId)						.build()		);		if (customerOrderMenuResponse == null) {			response.setStatus(HttpStatus.BAD_REQUEST);			response.setMessageError("Món ăn truyền vào tìm không tìm thấy vui lòng kiểm tra lại!");			return new ResponseEntity<>(response, HttpStatus.OK);		}		response.setData(new FoodResponse(customerOrderMenuResponse));		return new ResponseEntity<>(response, HttpStatus.OK);	}	@Operation(summary = "API Lấy danh sách menu order tại bàn", description = "API Lấy danh sách menu order tại bàn")	@Parameter(in = ParameterIn.QUERY, name = "restaurant_id", description = "Id nhà hàng, truyền phải lớn hơn 0")	@Parameter(in = ParameterIn.QUERY, name = "restaurant_brand_id", description = "Id thương hiệu, truyền phải lớn hơn 0")	@Parameter(in = ParameterIn.QUERY, name = "branch_id", description = "Id chi nhánh, truyền phải lớn hơn 0")	@Parameter(in = ParameterIn.QUERY, name = "area_id", description = "Id khu vực, truyền phải lớn hơn 0")	@Parameter(in = ParameterIn.QUERY, name = "category_type", description = "category_type, không truyền lấy tất cả")	@Parameter(in = ParameterIn.QUERY, name = "key_search", description = "key_search, không truyền lấy tất cả")	@Parameter(in = ParameterIn.QUERY, name = "page", description = "Phân trang, Mặc định sẽ lấy trang dầu tiên")	@Parameter(in = ParameterIn.QUERY, name = "limit", description = "Giới hạn lấy bao nhiêu phần tử, Mặc định là 20")	@GetMapping(value = "/customer-order/menu", consumes = { MediaType.ALL_VALUE }, produces = {MediaType.APPLICATION_JSON_VALUE })	@ResponseBody	public ResponseEntity<BaseResponse<BaseListDataResponse<FoodResponse>>> getMenuCustomerOrder(			@Valid @Min(value = 1, message = "Nhà hàng phải lớn hơn 0") @RequestParam(name = "restaurant_id", required = true) int restaurantId,			@Valid @Min(value = 1, message = "Thương hiệu phải lớn hơn 0") @RequestParam(name = "restaurant_brand_id", required = true) int restaurantBrandId,			@Valid @Min(value = 1, message = "Chi nhánh phải lớn hơn 0") @RequestParam(name = "branch_id", required = true) int branchId,			@Valid @Min(value = 1, message = "Khu vực phải lớn hơn 0") @RequestParam(name = "area_id", required = true) int areaId,			@RequestParam(name = "category_type", required = false, defaultValue = "-1") int categoryType,			@RequestParam(name = "key_search", required = false, defaultValue = "") String keySearch,			@Valid @Min(value = 20, message = "Mặc định là 20") @RequestParam(name = "limit", required = false, defaultValue = "20") int limit,			@Valid @Min(value = 1, message = "Mặc định là 1") @RequestParam(name = "page", required = false, defaultValue = "1") int page)			throws Exception {		BaseResponse<BaseListDataResponse<FoodResponse>> response = new BaseResponse<>();		Pagination pagination = new Pagination(page, limit);		CustomerOrderMenuListResponses customerOrderMenuListResponses =				new GrpcRetry().getMenu(customerOrderMenuServiceBlockingStub,				CustomerOrderMenuRequest.newBuilder()								.setRestaurantId(restaurantId)								.setRestaurantBrandId(restaurantBrandId)								.setBranchId(branchId)								.setAreaId(areaId)								.setCategoryType(categoryType)								.setKeySearch(keySearch)								.setPage(pagination.getOffset())								.setLimit(pagination.getLimit())						.build()				);		BaseListDataResponse<FoodResponse> baseListDataResponse = new BaseListDataResponse<>();		baseListDataResponse.setLimit(customerOrderMenuListResponses.getLimit());		baseListDataResponse.setTotalRecord(customerOrderMenuListResponses.getTotalRecord());		baseListDataResponse.setList(new FoodResponse().mapToList(customerOrderMenuListResponses.getListList()));		response.setData(baseListDataResponse);		return new ResponseEntity<>(response, HttpStatus.OK);	}	@Operation(summary = "API Lấy chi tiết món order tại bàn", description = "API Lấy chi tiết món order tại bàn")	@Parameter(in = ParameterIn.QUERY, name = "restaurant_id", description = "Id nhà hàng, truyền phải lớn hơn 0")	@Parameter(in = ParameterIn.QUERY, name = "restaurant_brand_id", description = "Id thương hiệu, truyền phải lớn hơn 0")	@Parameter(in = ParameterIn.QUERY, name = "branch_id", description = "Id chi nhánh, truyền phải lớn hơn 0")	@Parameter(in = ParameterIn.QUERY, name = "area_id", description = "Id khu vực, truyền phải lớn hơn 0")	@Parameter(in = ParameterIn.PATH, name = "id", description = "Id món ăn, truyền phải lớn hơn 0")	@GetMapping(value = "/customer-order/{id}", consumes = { MediaType.ALL_VALUE }, produces = {MediaType.APPLICATION_JSON_VALUE })	@ResponseBody	public ResponseEntity<BaseResponse<FoodResponse>> getDetailCustomerOrder(			@Valid @Min(value = 1, message = "Nhà hàng phải lớn hơn 0") @RequestParam(name = "restaurant_id", required = true) int restaurantId,			@Valid @Min(value = 1, message = "Thương hiệu phải lớn hơn 0") @RequestParam(name = "restaurant_brand_id", required = true) int restaurantBrandId,			@Valid @Min(value = 1, message = "Chi nhánh phải lớn hơn 0") @RequestParam(name = "branch_id", required = true) int branchId,			@Valid @Min(value = 1, message = "Khu vực phải lớn hơn 0") @RequestParam(name = "area_id", required = true) int areaId,			@Valid @Min(value = 1, message = "Mặc định là 1") @PathVariable("id") int foodId)			throws Exception {		BaseResponse<FoodResponse> response = new BaseResponse<>();		CustomerOrderMenuResponse customerOrderMenuResponse = new GrpcRetry().getCustomerOrderMenuByFoodId(						customerOrderMenuServiceBlockingStub,						CustomerOrderMenuByFoodIdRequest.newBuilder()								.setRestaurantId(restaurantId)								.setRestaurantBrandId(restaurantBrandId)								.setBranchId(branchId)								.setAreaId(areaId)								.setFoodId(foodId)								.build()				);		if (customerOrderMenuResponse == null) {			response.setStatus(HttpStatus.BAD_REQUEST);			response.setMessageError("Món ăn truyền vào tìm không tìm thấy vui lòng kiểm tra lại!");			return new ResponseEntity<>(response, HttpStatus.OK);		}		response.setData(new FoodResponse(customerOrderMenuResponse));		return new ResponseEntity<>(response, HttpStatus.OK);	}}