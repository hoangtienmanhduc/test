package vn.techres.order.online.v1.response;import com.fasterxml.jackson.annotation.JsonProperty;import io.swagger.v3.oas.annotations.media.Schema;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;import vn.techres.order.online.common.utils.Utils;import vn.techres.order.online.v1.entity.CustomerOrder;import vn.techres.order.online.v1.entity.CustomerOrderDetail;import java.math.BigDecimal;import java.util.ArrayList;import java.util.List;@NoArgsConstructor@AllArgsConstructor@Datapublic class CustomerOrderResponse {    @Schema(description = "id bill tạm")    private int id;    @Schema(description = "id nhà hàng")    @JsonProperty("restaurant_id")    private int restaurantId;    @Schema(description = "id thương hiệu")    @JsonProperty("restaurant_brand_id")    private int restaurantBrandId;    @Schema(description = "id chi nhánh")    @JsonProperty("branch_id")    private int branchId;    @Schema(description = "id đơn hàng hệ thống")    @JsonProperty("order_id")    private int orderId;    @Schema(description = "id khach hang")    @JsonProperty("customer_id")    private int customerId;    @Schema(description = "id khu vực")    @JsonProperty("area_id")    private int areaId;    @Schema(description = "id bàn")    @JsonProperty("table_id")    private int tableId;    @Schema(description = "Tên bàn")    @JsonProperty("table_name")    private String tableName = "";    @Schema(description = "Tên khách hàng")    @JsonProperty("customer_name")    private String customerName = "";    @Schema(description = "Số điện thoại khách hàng")    @JsonProperty("phone")    private String phone = "";    @Schema(description = "Địa chỉ khách hàng")    @JsonProperty("address")    private String address = "";    @Schema(description = "Tổng tiền thanh toán")    @JsonProperty("total_amount")    private BigDecimal totalAmount;    @Schema(description = "Trạng thái thanh toán")    @JsonProperty("payment_status")    private int paymentStatus;    @Schema(description = "Phương thức thanh toán")    @JsonProperty("payment_method")    private int paymentMethod;    @Schema(description = "ghi chú")    private String note = "";    @Schema(description = "Trạng thái bill")    @JsonProperty("customer_order_status")    private int customerOrderStatus;    @Schema(description = "Hình thước order")    @JsonProperty("customer_order_type")    private int customerOrderType;    @Schema(description = "Danh sách món ăn")    @JsonProperty("customer_order_details")    private List<CustomerOrderDetailResponse> customerOrderDetails = new ArrayList<>();    @JsonProperty("created_at")    private String createdAt;    @JsonProperty("updated_at")    private String updatedAt;    public CustomerOrderResponse(CustomerOrder entity) {        this.id = entity.getId();        this.restaurantId = entity.getRestaurantId();        this.restaurantBrandId = entity.getRestaurantBrandId();        this.branchId = entity.getBranchId();        this.orderId = entity.getOrderId();        this.customerId = entity.getCustomerId();        this.tableId = entity.getTableId();        this.areaId = entity.getAreaId();        this.tableName = entity.getTableName();        this.customerName = entity.getCustomerName();        this.phone = entity.getCustomerPhone();        this.address = entity.getCustomerAddress();        this.totalAmount = entity.getTotalAmount();        this.note = entity.getNote() == null? "" : entity.getNote();        this.paymentMethod = entity.getPaymentMethod();        this.paymentStatus = entity.getPaymentStatus();        this.customerOrderStatus = entity.getCustomerOrderStatus();        this.customerOrderType = entity.getCustomerOrderType();        this.createdAt = Utils.getDatetimeFormatVN(entity.getCreatedAt());        this.updatedAt = Utils.getDatetimeFormatVN(entity.getUpdatedAt());    }    public CustomerOrderResponse(CustomerOrder entity, List<CustomerOrderDetail> customerOrderDetails)            throws Exception {        this.id = entity.getId();        this.restaurantId = entity.getRestaurantId();        this.restaurantBrandId = entity.getRestaurantBrandId();        this.branchId = entity.getBranchId();        this.orderId = entity.getOrderId();        this.customerId = entity.getCustomerId();        this.tableId = entity.getTableId();        this.areaId = entity.getAreaId();        this.tableName = entity.getTableName();        this.customerName = entity.getCustomerName();        this.phone = entity.getCustomerPhone();        this.address = entity.getCustomerAddress();        this.totalAmount = entity.getTotalAmount();        this.paymentMethod = entity.getPaymentMethod();        this.paymentStatus = entity.getPaymentStatus();        this.note = entity.getNote() == null ? "" : entity.getNote();        this.customerOrderStatus = entity.getCustomerOrderStatus();        this.customerOrderType = entity.getCustomerOrderType();        this.customerOrderDetails = new CustomerOrderDetailResponse().mapToList(customerOrderDetails);        this.createdAt = Utils.getDatetimeFormatVN(entity.getCreatedAt());        this.updatedAt = Utils.getDatetimeFormatVN(entity.getUpdatedAt());    }    public List<CustomerOrderResponse> mapToList(List<CustomerOrder> entities)            throws Exception {        return entities.stream().map(CustomerOrderResponse::new).toList();    }}